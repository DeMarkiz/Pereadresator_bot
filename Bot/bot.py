import os
import sys
import zipfile
import rarfile
import shutil
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import asyncio
import logging
from logging.handlers import RotatingFileHandler
from rich.logging import RichHandler
from main import run_main
import re
import io
from contextlib import redirect_stdout
from dotenv import load_dotenv



load_dotenv()

TOKEN = "BOT_TOKEN"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

SESSION_DIR = "sessions"
LOG_FILE = "log.txt"
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[
        RichHandler(markup=True),  # Rich logging –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        RotatingFileHandler(LOG_FILE, maxBytes=1_000_000, backupCount=3, encoding="utf-8")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    ]
)

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –∞—Ä—Ö–∏–≤ (.zip –∏–ª–∏ .rar) —Å Telegram-—Å–µ—Å—Å–∏—è–º–∏.")


@dp.message()
async def handle_archive(message: types.Message):
    if not message.document:
        return await message.reply("–ü—Ä–∏—à–ª–∏ –∞—Ä—Ö–∏–≤ –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (.zip –∏–ª–∏ .rar)")

    file = message.document
    if not (file.file_name.endswith(".zip") or file.file_name.endswith(".rar")):
        return await message.reply("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .zip –∏ .rar –∞—Ä—Ö–∏–≤—ã")

    file_path = f"{file.file_id}_{file.file_name}"
    await bot.download(file, destination=file_path)

    # –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    if os.path.exists(SESSION_DIR):
        shutil.rmtree(SESSION_DIR)
    os.makedirs(SESSION_DIR, exist_ok=True)

    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
    try:
        if file.file_name.endswith(".zip"):
            with zipfile.ZipFile(file_path, 'r') as zip_ref:
                zip_ref.extractall(SESSION_DIR)
        elif file.file_name.endswith(".rar"):
            with rarfile.RarFile(file_path, 'r') as rar_ref:
                rar_ref.extractall(SESSION_DIR)
    except Exception as e:
        return await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ: {e}")

    os.remove(file_path)

    # –ü–µ—Ä–µ–Ω–æ—Å .session –∏ .json –≤ –∫–æ—Ä–µ–Ω—å
    for root, _, files in os.walk(SESSION_DIR):
        for fname in files:
            if fname.endswith(".session") or fname.endswith(".json"):
                src = os.path.join(root, fname)
                dst = os.path.join(SESSION_DIR, fname)
                if src != dst:
                    shutil.move(src, dst)

    await message.reply("–ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞...")

    # –ü–µ—Ä–µ—Ö–≤–∞—Ç stdout
    f = io.StringIO()
    try:
        with redirect_stdout(f):
            await run_main()
    except Exception as e:
        return await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ run_main(): {e}")

    output = f.getvalue()
    await message.reply("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß–∏—Ç–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞ log.txt
    success = failed = wrong_2fa = dead = spam = not_spam = 0

    try:
        with open(LOG_FILE, 'r', encoding='utf-8') as log_file:
            output = log_file.read()

        # –ü—Ä–æ—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –≤—ã–≤–æ–¥–∞ –∏ –≤—ã–≤–µ–¥–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for line in output.splitlines():
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–æ–∫—É: {line}")  # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É

            if "–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π" in line:
                match = re.search(r"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π:\s*(\d+)", line)
                if match:
                    success = int(match.group(1))
                    print(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: {success}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            elif "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏–π" in line:
                match = re.search(r"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏–π:\s*(\d+)", line)
                if match:
                    failed = int(match.group(1))
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏–π: {failed}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            elif "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" in line:
                match = re.search(r"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å:\s*(\d+)", line)
                if match:
                    wrong_2fa = int(match.group(1))
                    print(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA): {wrong_2fa}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            elif "–ú–µ—Ä—Ç–≤—ã—Ö" in line:
                match = re.search(r"–ú–µ—Ä—Ç–≤—ã—Ö:\s*(\d+)", line)
                if match:
                    dead = int(match.group(1))
                    print(f"–ú–µ—Ä—Ç–≤—ã—Ö —Å–µ—Å—Å–∏–π: {dead}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å "—Å–ø–∞–º" –∏–ª–∏ "–Ω–µ —Å–ø–∞–º"
            elif "–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: spam" in line:
                spam += 1
            elif "–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: not spam" in line:
                not_spam += 1

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        print(
            f"–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –£—Å–ø–µ—à–Ω–æ: {success}, –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}, –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: {wrong_2fa}, –ú–µ—Ä—Ç–≤—ã—Ö: {dead}, –°–ø–∞–º: {spam}, –ù–µ —Å–ø–∞–º: {not_spam}")

        # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è
        await message.reply(
            f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: <b>{success}</b>\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏–π: <b>{failed}</b>\n"
            f"üîë –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA): <b>{wrong_2fa}</b>\n"
            f"üíÄ –ú–µ—Ä—Ç–≤—ã—Ö —Å–µ—Å—Å–∏–π: <b>{dead}</b>\n"
            f"üö´ –°–ø–∞–º: <b>{spam}</b>\n"
            f"‚úÖ –ù–µ —Å–ø–∞–º: <b>{not_spam}</b>"
        )

    except FileNotFoundError:
        await message.reply("–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")


if __name__ == '__main__':
    import asyncio
    from aiogram import Router

    router = Router()
    router.message.register(start_handler, CommandStart())
    router.message.register(handle_archive)
    dp.include_router(router)

    async def main():
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)

    asyncio.run(main())
